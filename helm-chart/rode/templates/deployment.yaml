apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "rode.fullname" . }}
  labels:
    app: {{ template "rode.name" . }}
    helm.sh/chart: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "rode.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "rode.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Values.rbac.serviceAccountName }}
      securityContext:
        fsGroup: 65534
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: certificates
            mountPath: /certificates
          env:
            - name: ENABLE_ATTESTER
              value: {{ quote .Values.attesters.enabled }}
            - name: ENABLE_ENFORCER
              value: {{ quote .Values.enforcer.enabled }}
            - name: AWS_REGION
              value: {{ .Values.region }}
            - name: GIN_MODE
              value: {{ .Values.ginMode }}
            - name: GRAFEAS_ENDPOINT
              value: {{ .Values.grafeas.endpoint | default  (printf "grafeas-server.%s.svc.cluster.local:443" .Release.Namespace) }}
            - name: TLS_CA_CERT
              value: /certificates/ca.crt
            - name: TLS_CLIENT_CERT
              value: /certificates/tls.crt
            - name: TLS_CLIENT_KEY
              value: /certificates/tls.key
{{ include "rode.env" . | indent 12 }}
          {{- with .Values.extraEnv }}
{{ toYaml . | indent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.livenessProbe.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.readinessProbe.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: certificates
          secret:
            secretName: {{ .Values.certificates.name }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
